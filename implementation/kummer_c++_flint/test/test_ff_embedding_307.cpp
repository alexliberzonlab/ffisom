
#include "ff_embedding.h"
#include <iostream>
#include "nmod_min_poly.h"
#include <flint/profiler.h>

using namespace std;

void test_build_embedding() {
  
  slong m = 307;
  slong n = m;
  slong characteristic = 9227;

  mp_limb_t P1[]  = {6511, 7706, 2949, 4460, 2759, 2853, 1011, 3939, 585, 7376, 4913, 6473, 822, 3313, 3906, 6048, 8228, 9087, 8649, 6709, 7443, 2710, 3577, 78, 2515, 57, 9155, 1287, 2836, 4559, 8854, 9045, 1367, 5336, 5926, 9060, 9185, 567, 3982, 2246, 211, 453, 3312, 1307, 6434, 4018, 1120, 3331, 3822, 3613, 214, 6511, 462, 6563, 2619, 5908, 2151, 8389, 4310, 7329, 66, 4544, 2982, 1406, 4629, 2023, 8919, 480, 8413, 6807, 8447, 74, 826, 4029, 1461, 271, 1285, 2713, 6072, 222, 4599, 8488, 7544, 7306, 6798, 4022, 2688, 7482, 3808, 1932, 7781, 6363, 6902, 8380, 4507, 6022, 3367, 942, 1782, 7825, 6024, 4079, 6557, 7264, 4828, 673, 7564, 787,2695, 6406, 1146, 7730, 5923, 296, 3524, 8857, 4381, 6113, 6100, 8728, 2012, 4215, 4530, 1342, 2207, 8994, 5948, 2867, 1551, 8886, 2442, 3222, 8342, 1587, 4344, 8739, 7182, 5959, 4172, 1496, 7192, 5303, 2473, 4554, 4287, 6361, 6563, 193, 6527, 2248, 5224, 6003, 7433, 4946, 5908, 2293, 5971, 7923, 6872, 1769, 1442, 7879, 7117, 6280, 3399, 2866, 176, 4467, 7168, 4325, 4211, 4254, 894, 8528, 8049, 0, 4668, 4646, 2042, 7165, 6756, 2629, 7477, 4239, 1075, 4494, 2758, 6053, 1291, 615, 5202, 1980, 1462, 3013, 2178, 8377, 5189, 6855, 7515, 6069, 4058, 6334, 4895, 4244, 8386, 9156, 6923, 7260, 6922, 1399, 6231, 3155, 1291, 2248, 999, 909, 2756, 3041, 8201, 3195, 4259, 6876, 1041, 3496, 1760, 8166, 2965, 3955, 7073, 2309, 6365, 4290, 8392, 8164, 623, 8588, 7144, 3659, 1455, 2376,2264, 4404, 5844, 8932, 401, 595, 2681, 5530, 6962, 3311, 5304, 7547, 4359, 9208, 8680, 9143, 2964, 775, 2918, 6944, 7075, 9163, 8671, 1055, 281, 4290, 1170, 2154, 2795, 2262, 8628, 7253, 4337, 2889, 7146, 603, 3781, 5861, 3590, 7794, 2850, 548, 3399, 398, 5585, 6873, 8562, 5645, 6458, 8195, 6666, 8419, 4080, 8635,5155, 9018, 4404, 1178, 2171, 2427, 3405, 3901, 8247, 4662, 5967, 223, 3155, 1};

  mp_limb_t P2[] = {4016, 2350, 6318, 4755, 2921, 5232, 7002, 241, 3433, 4907, 641, 8492, 5948, 7826, 7980, 4232, 5864, 2281, 7597, 6157, 3529, 1426, 5436, 7529, 5238, 6632, 6764, 8429, 3014, 5765, 5757, 5805, 5964, 8767, 3144, 6044, 677, 1019, 8127, 7248, 302, 6857, 1312, 9103, 5148, 1802, 4760, 192, 4902, 3467, 7076, 5278, 7101,2352, 3626, 28, 8646, 6536, 1534, 4974, 5486, 5210, 2752, 8729, 7964, 575, 16, 8298, 1779, 9212, 993, 4125, 5229, 3381, 4695, 4100, 1455, 4600, 4082, 2412, 3308, 3547, 4479, 3440, 7094, 2397, 5309, 4545, 3441, 5700, 6058, 1243, 2763, 3201, 3742, 6580, 8967, 7010, 8174, 2969, 6160, 5824, 8597, 1751, 3598, 4833, 9072, 2876, 1461, 2037, 2738, 6983, 9035, 5298, 3558, 2657, 2972, 655, 2582, 3443, 5769, 8679, 7509, 7938, 463, 2206, 655, 1622, 8922, 2982, 1656, 5764, 1347,7264, 2113, 2478, 6329, 2054, 2356, 4184, 1635, 462, 164, 919, 1054, 8510, 7428, 7600, 2148, 5793, 3353, 3749, 2702, 2313, 3422, 6381, 3232, 3868, 1290, 4278,6793, 8204, 8843, 8716, 5964, 614, 5589, 3149, 1777, 3890, 4883, 8422, 2814, 9180, 1919, 7043, 714, 5434, 6553, 1058, 341, 4706, 3635, 2301, 1182, 8027, 4223,6401, 2198, 1711, 8345, 6716, 5603, 614, 9183, 4111, 123, 532, 364, 5751, 5641, 6864, 297, 3724, 7634, 807, 626, 8696, 4279, 2969, 2676, 7668, 8564, 4625, 8447, 976, 693, 3733, 1331, 2287, 2984, 4993, 1624, 4163, 8389, 3206, 4571, 7757, 6424, 5693, 7693, 5154, 4758, 5753, 4298, 5338, 7386, 8481, 9219, 4706, 2611, 8875, 4647, 5308, 8121, 5816, 3118, 2765, 8078, 1349, 4329, 7757, 5469, 4732, 192, 5510, 5808, 6638, 7086, 2542, 6475, 3527, 8443, 428, 3379, 3564, 7109, 604, 2352, 3280, 2271, 3309, 8128, 3958, 3667, 355, 2283, 8150, 4079, 3177, 5759, 4120, 6201, 428, 6581, 7853, 961, 5553, 7964, 8422, 1963, 3477, 9083, 3666, 2595, 2100, 4872, 6549, 4438, 6591, 4791, 6835, 733, 1965, 4180, 4771, 4029, 1};

	slong linear_alg_threshold = 900;
	slong multi_point_threshold = 900;
	cout << "characteristic: " << characteristic << "\n";
	cout << "extension degrees: " << m << ", " << n << "\n";
	cout << "linear algebra threshold: " << linear_alg_threshold << "\n";
	cout << "multipoint threshold: " << multi_point_threshold << "\n";

	mp_limb_t p = characteristic;

	flint_rand_t state;
	flint_randinit(state);

	nmod_poly_t f1, f2, g1, g2;
	nmod_poly_init(f1, p);
	nmod_poly_init(f2, p);
	nmod_poly_init(g1, p);
	nmod_poly_init(g2, p);

	cout << "building finite fields...\n";
	nmod_poly_fit_length(f1, m+1);
	for (long i = 0; i <= m; i++)
	  f1->coeffs[i] = P1[i];
	f1->length = m+1;
	_nmod_poly_normalise(f1);

	nmod_poly_fit_length(f2, m+1);
	for (long i = 0; i <= m; i++)
	  f2->coeffs[i] = P2[i];
	f2->length = m+1;
	_nmod_poly_normalise(f2);

	// cout << nmod_poly_degree(f1) << endl;
	// cout << nmod_poly_degree(f2) << endl;
	// cout << nmod_poly_is_irreducible(f1) << endl;
	// cout << nmod_poly_is_irreducible(f2) << endl;

	cout << "building an embedding...\n";
	timeit_t time;
	timeit_start(time);
	FFEmbedding ffEmbedding(f1, f2);
	cout << "here...\n";
	ffEmbedding.compute_generators(g1, g2, linear_alg_threshold, multi_point_threshold);
	cout << "there...\n";
	ffEmbedding.build_embedding(g1, g2);
	timeit_stop(time);
	cout << "time: " << (double) time->wall / 1000.0 << "\n";

	cout << "testing the embedding... ";
	nmod_poly_t temp;
	nmod_poly_init(temp, p);
	// set temp = x
	nmod_poly_set_coeff_ui(temp, 1, 1);
	// compute the image of x
	ffEmbedding.compute_image(temp, temp);

	// the image of x should be a root of f1 in F_p[X]/(f2)
	nmod_poly_compose_mod(temp, f1, temp, f2);
	if (nmod_poly_is_zero(temp))
		cout << "ok\n";
	else
		cout << "ooops\n";

	flint_randclear(state);
	nmod_poly_clear(f1);
	nmod_poly_clear(f2);
	nmod_poly_clear(g1);
	nmod_poly_clear(g2);
	nmod_poly_clear(temp);

}

int main() {
	test_build_embedding();
	return 0;
}
